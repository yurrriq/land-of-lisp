% -*- mode: noweb; ess-noweb-default-code-mode: lisp-mode; -*-
\documentclass{tufte-handout}

\input{preamble.tex}

\hypersetup{
  pdffitwindow=true,
  pdfstartview={FitH},
  pdftitle={The Wizard's Adventure Game},
  pdfauthor={Eric Bailey <eric@ericb.me>},
  pdfsubject={Land of Lisp: Chapter 5},
  pdfkeywords={Lisp, game, literate programming, noweb},
  colorlinks=true,
  linkcolor=ErlangRed,
  urlcolor=ErlangRed
}

\title{%
  The Wizard's Adventure Game
  \thanks{\cite{barski2010land-ch5}}
}

\date{%
  October 14, 2017
  \thanks{Last updated \today}
}

\begin{document}
\maketitle
@

\begin{abstract}
  In this game, you are a wizard's apprentice. \\
  \noindent You'll explore the wizard's house.
\end{abstract}

\tableofcontents

<<*>>=
(in-package #:lol)
(defpackage #:lol.wizard5
  (:use #:cl #:lisp-unit)
  (:export #:look
           #:walk
           #:pickup))
(in-package #:lol.wizard5)


@

\newpage
\section{Setting the Scene}

This world consists of only three locations:

\begin{marginfigure}
<<*>>=
<<define the global variables>>
@

<<living-room description>>=
you are in the living room.
a wizard is snoring loudly on the couch.
@

<<garden description>>=
you are in a beautiful garden.
there is a well in front of you.
@

<<attic description>>=
you are in the attic.
there is a giant welding torch in the corner.
@
\end{marginfigure}

\begin{itemize}
  \item the living room
  \item a beautiful garden
  \item the attic
\end{itemize}


<<define the global variables>>=
(defparameter *nodes*
  '((living-room (<<living-room description>>))
    (garden      (<<garden description>>))
    (attic       (<<attic description>>))))

@ %def *nodes*


\section{Describing the Location}

\begin{marginfigure}
<<look up a location>>=
(assoc location nodes)
@

\begin{minted}{lisp}
> (describe-location 'living-room *nodes*)
(YOU ARE IN THE LIVING-ROOM.
 A WIZARD IS SNORING LOUDLY ON THE COUCH.)
\end{minted}
\end{marginfigure}

To find the description, [[<<look up a location>>]] and take the \lsp{cadr}.
Preferring the {\sl functional programming} style, pass \lsp{nodes} as an
argument, instead of referencing [[*nodes*]] directly.

<<*>>=
(defun describe-location (location nodes)
  (cadr <<look up a location>>))


@


\section{Describing the Paths}

From the \lsp{living-room}, you can move to the \lsp{garden} by going \lsp{west}
through the \lsp{door}, or to the \lsp{attic} by going \lsp{upstairs} via the
\lsp{ladder}.

From the \lsp{garden}, you can move to the \lsp{living-room} by going \lsp{east}
through the \lsp{door}.

From the \lsp{attic}, you can move to the \lsp{living-room} by going
\lsp{downstairs} via the \lsp{ladder}.

\begin{marginfigure}
<<living-room paths>>=
(garden west door)
(attic upstairs ladder)
@

<<garden path>>=
(living-room east door)
@

<<attic path>>=
(living-room downstairs ladder)
@

\begin{minted}{lisp}
> (describe-path '(garden west door))
(THERE IS A DOOR GOING WEST FROM HERE.)
\end{minted}
\end{marginfigure}

<<define the global variables>>=
(defparameter *edges*
  '((living-room <<living-room paths>>)
    (garden      <<garden path>>)
    (attic       <<attic path>>)))

@ %def *edges*


To describe a path, take the means (\lsp{caddr}) and direction (\lsp{cadr}) and
return a descriptive list.

<<*>>=
(defun describe-path (edge)
  `(there is a ,(caddr edge) going ,(cadr edge) from here.))


@


\section{Describing Multiple Paths at Once}

To describe multiple paths:

\begin{marginfigure}
<<Find the relevant edges.>>=
(cdr (assoc location edges))
@

<<Convert the edges to descriptions.>>=
mapcar #'describe-path
@
% FIXME: @index use describe-path

<<Join the descriptions.>>=
apply #'append
@

\begin{minted}{lisp}
> (describe-paths 'living-room *edges*)
(THERE IS A DOOR GOING WEST FROM HERE.
 THERE IS A LADDER GOING UPSTAIRS FROM HERE.)
\end{minted}
\end{marginfigure}

\begin{enumerate}

  \item [[<<Find the relevant edges.>>]]
  \item [[<<Convert the edges to descriptions.>>]]
  \item [[<<Join the descriptions.>>]]
\end{enumerate}

<<*>>=
(defun describe-paths (location edges)
  (<<Join the descriptions.>> (<<Convert the edges to descriptions.>> <<Find the relevant edges.>>)))


@


\section{Describing Objects at a Specific Location}

<<define the global variables>>=
(defparameter *objects* '(whiskey bucket frog chain))

(defparameter *object-locations*
  '((whiskey living-room)
    (bucket living-room)
    (chain garden)
    (frog garden)))

@ %def *object-locations*

\begin{marginfigure}
<<at-loc-p>>=
(at-loc-p (obj)
  (eq (cadr (assoc obj obj-locs)) loc))
@
\end{marginfigure}

<<*>>=
(defun objects-at (loc objs obj-locs)
  (labels (<<at-loc-p>>)
    (remove-if-not #'at-loc-p objs)))


@

\begin{minted}{lisp}
> (objects-at 'living-room *objects* *object-locations*)
(WHISKEY BUCKET)
\end{minted}


\section{Describing Visible Objects}

\begin{marginfigure}
<<describe-obj>>=
(describe-obj (obj)
  `(you see a ,obj on the floor.))
@

<<Find the objects at the current location.>>=
(objects-at loc objs obj-loc)
@

<<Convert the objects to descriptions.>>=
mapcar #'describe-obj
@
\end{marginfigure}

To describe the objects visible at a given location:
\begin{enumerate}
  \item [[<<Find the objects at the current location.>>]]
  \item [[<<Convert the objects to descriptions.>>]]
  \item [[<<Join the descriptions.>>]]
\end{enumerate}

<<*>>=
(defun describe-objects (loc objs obj-loc)
  (labels (<<describe-obj>>)
    (<<Join the descriptions.>>
           (<<Convert the objects to descriptions.>>
                   <<Find the objects at the current location.>>))))


@

\begin{minted}{lisp}
> (describe-objects 'living-room *objects* *object-locations*)
(YOU SEE A WHISKEY ON THE FLOOR.
 YOU SEE A BUCKET ON THE FLOOR.)
\end{minted}


\section{Describing It All}

\marginnote{%
  N.B. The [[look]] function is {\bf not} functional, since it reads global
  variables.
}

\begin{marginfigure}
<<define the global variables>>=
(defparameter *location* 'living-room)


@

\begin{minted}{lisp}
> (look)
(YOU ARE IN THE LIVING ROOM.
 A WIZARD IS SNORING LOUDLY ON THE COUCH.
 THERE IS A DOOR GOING WEST FROM HERE.
 THERE IS A LADDER GOING UPSTAIRS FROM HERE.
 YOU SEE A WHISKEY ON THE FLOOR.
 YOU SEE A BUCKET ON THE FLOOR.)
\end{minted}
\end{marginfigure}

<<*>>=
(defun look ()
  (append (describe-location *location* *nodes*)
          (describe-paths *location* *edges*)
          (describe-objects *location* *objects* *object-locations*)))


@


\section{Walking Around in Our World}

Given a \lsp{direction},
[[<<locate the path marked with the appropriate direction>>]] and
[[<<try to go in that direction>>]]. Since the \lsp{direction} will be there,
[[<<match against the [[cadr]] of each path>>]].

\begin{marginfigure}
<<look up the available walkings paths>>=
(cdr (assoc *location* *edges*))
@

<<match against the [[cadr]] of each path>>=
:key #'cadr
@
\end{marginfigure}

<<locate the path marked with the appropriate direction>>=
(find direction
      <<look up the available walkings paths>>
      <<match against the [[cadr]] of each path>>)
@

If such a path is found, [[<<adjust the player's position>>]],
otherwise [[<<admonish the player>>]].

<<try to go in that direction>>=
(if next
    (progn <<adjust the player's position>>
           (look))
    <<admonish the player>>)
@

\begin{marginfigure}
<<adjust the player's position>>=
(setf *location* (car next))
@

<<admonish the player>>=
'(you cannot go that way.)
@
\end{marginfigure}

<<*>>=
(defun walk (direction)
  (let ((next <<locate the path marked with the appropriate direction>>))
    <<try to go in that direction>>))


@


% \newpage
\section{Picking Up Objects}

\begin{marginfigure}
<<the object is on the floor>>=
(member object <<get the list of objects here>>)
@

<<pick it up>>=
(push (list object 'body) *object-locations*)
`(you are now carrying the ,object)
@
\end{marginfigure}

If [[<<the object is on the floor>>]], [[<<pick it up>>]].

<<get the list of objects here>>=
(objects-at *location* *objects* *object-locations*)
@

<<*>>=
(defun pickup (object)
  (if <<the object is on the floor>>
      (progn <<pick it up>>)
      '(you cannot get that)))


@

\begin{minted}{lisp}
> (pickup 'whiskey)
(YOU ARE NOW CARRYING THE WHISKEY)
\end{minted}


\section{Checking Our Inventory}

\begin{marginfigure}
<<retrieve the list of carried objects>>=
(objects-at 'body *objects* *object-locations*)
@

\begin{minted}{lisp}
> (inventory)
(ITEMS- WHISKEY)
\end{minted}
\end{marginfigure}

<<*>>=
(defun inventory ()
  (cons 'items- <<retrieve the list of carried objects>>))


@


\section{Tests}

<<*>>=
(define-test describe-living-room
  (assert-equal '(<<living-room description>>)
                (describe-location 'living-room *nodes*)))


@

<<*>>=
(define-test garden-path
  (assert-equal '(THERE IS A DOOR GOING WEST FROM HERE.)
                (describe-path '(garden west door))))


@

<<*>>=
(define-test living-room-paths
  (assert-equal '(THERE IS A DOOR GOING WEST FROM HERE.
                  THERE IS A LADDER GOING UPSTAIRS FROM HERE.)
                (describe-paths 'living-room *edges*)))
@


<<*>>=
(define-test living-room-objects
  (assert-equal '(WHISKEY BUCKET)
                (objects-at 'living-room *objects* *object-locations*)))


@


<<*>>=
(define-test describe-living-room-objects
  (assert-equal '(YOU SEE A WHISKEY ON THE FLOOR.
                  YOU SEE A BUCKET ON THE FLOOR.)
                 (describe-objects 'living-room *objects* *object-locations*)))


@

<<*>>=
(define-test look
  (assert-equal '(<<living-room description>>
                  THERE IS A DOOR GOING WEST FROM HERE.
                  THERE IS A LADDER GOING UPSTAIRS FROM HERE.
                  YOU SEE A WHISKEY ON THE FLOOR.
                  YOU SEE A BUCKET ON THE FLOOR.)
                 (look)))


@

<<*>>=
(define-test pickup-whiskey
  (assert-equal '(YOU ARE NOW CARRYING THE WHISKEY)
                (pickup 'whiskey)))


@

<<*>>=
(define-test have-whiskey
  (assert-equal '(ITEMS- WHISKEY)
                (inventory)))
@


\newpage
\section{Running the Tests}

\begin{marginfigure}
  The package under test is specified as the first argument on the command line
  and prefixed with \lsp{:lol.} and used to
  [[<<set the value of [[*package*]]>>]] in [[<<bin/runtests>>]].

<<set the value of [[*package*]]>>=
--eval "(in-package <<the specified package>>)"
@

<<the specified package>>=
:lol.$1
@

<<Set the exit status.>>=
(if (null failures) 0 1)
@

<<Exit with an appropriate status code.>>=
(sb-posix:exit status)
@
\end{marginfigure}


\todo[inline]{Describe [[lisp-unit]]}
<<Run the lisp-unit tests.>>=
(let* ((results  <<Run all tests in the package.>>)
       (failures <<Collect the failures.>>)
       (status   <<Set the exit status.>>))
  <<Print the failures.>>
  <<Exit with an appropriate status code.>>)
@

<<Run all tests in the package.>>=
(lisp-unit:run-tests :all <<the specified package>>)
@

<<Collect the failures.>>=
(lisp-unit:failed-tests results)
@

<<Print the failures.>>=
(lisp-unit:print-failures results)
@


% \subsection{Script}

\begin{marginfigure}
<<Run SBCL quietly>>=
sbcl --noinform --non-interactive
@

<<Load [[init.lisp]] as the user initialization file.>>=
--userinit init.lisp
@
\end{marginfigure}

\todo[inline]{Describe nix-shell shebang}
<<bin/runtests>>=
#! /usr/bin/env nix-shell
#! nix-shell -i sh -p sbcl
@

<<bin/runtests>>=
<<Run SBCL quietly>> \
     <<Load [[init.lisp]] as the user initialization file.>> \
     <<set the value of [[*package*]]>> \
     --eval "<<Run the lisp-unit tests.>>"
@

\begin{minted}[gobble=2]{shell-session}
  $ ./bin/runtests wizard5
  Unit Test Summary
 | 8 assertions total
 | 8 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests
\end{minted}


\newpage
\newgeometry{left=0.625in,right=3.75in}
\setlength{\linewidth}{1.8\textwidth}
\begin{multicols*}{2}
[\section{Full Listing}]
\inputminted[linenos,lastline=50,fontsize=\footnotesize]{lisp}{src/wizard5.lisp}
\columnbreak
\inputminted[linenos,firstline=53,lastline=85,fontsize=\footnotesize]{lisp}{src/wizard5.lisp}
\newpage
\inputminted[linenos,firstline=87,fontsize=\footnotesize]{lisp}{src/wizard5.lisp}
\end{multicols*}
\restoregeometry


% \section{Example Session}

% After loading \srclink{src/wizard5.lisp},
% you might have [[<<session>>]] like this.

% \begin{marginfigure}
% \begin{minted}{shell-session}
% $ rlwrap sbcl --load src/wizard5.lisp
% \end{minted}
% \end{marginfigure}


\newpage
\setlength{\linewidth}{2\textwidth}
\begin{multicols}{2}
  \section{Chunks}
  \nowebchunks
  \columnbreak

  \section{Index}
  \nowebindex
\end{multicols}


\setlength{\linewidth}{1.4\textwidth}

\bibliography{lol}
\bibliographystyle{plainnat}


\end{document}
